{"version":3,"sources":["selectors/selectFields.js","services/hnApi.js","styles/StoryStyles.js","components/Story.js","mappers/mapTime.js","styles/StoriesContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/StoriesContainer.js","App.js","serviceWorker.js","index.js"],"names":["selectFields","id","by","title","url","time","baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","memo","useState","story","setStory","useEffect","data-testid","href","timestamp","seconds","Math","floor","Date","interval","mapTime","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","debounce","document","documentElement","offsetHeight","window","innerHeight","scrollTop","addEventListener","removeEventListener","StoriesContainer","storyIds","setStoryIds","data-test-id","slice","map","key","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","StrictMode","getElementById","URL","process","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.612145c4.chunk.js","sourcesContent":["//Method to filter unneccessary data\r\n\r\nexport const selectFields = ({ id, by, title, url, time } = {}) => ({\r\n  id,\r\n  by,\r\n  title,\r\n  url,\r\n  time,\r\n});\r\n","import axios from \"axios\";\r\nimport { selectFields } from \"../selectors/selectFields\";\r\n\r\nexport const baseUrl = \"https://hacker-news.firebaseio.com/v0/\";\r\n\r\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\r\n\r\nexport const storyUrl = `${baseUrl}item/`;\r\n\r\nexport const getStory = async (storyId) => {\r\n  const result = await axios\r\n    .get(`${storyUrl + storyId}.json`)\r\n    .then(({ data }) => selectFields(data));\r\n\r\n  return result;\r\n};\r\n\r\nexport const getStoryIds = async () => {\r\n  const result = await axios.get(newStoriesUrl).then(({ data }) => data);\r\n  return result;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StoryWrapper = styled.section`\r\n  padding-top: 10px;\r\n  margin-bottom: 20px;\r\n  border-top: 1px solid #cccccc;\r\n\r\n  &:first-of-type {\r\n    border-top: 0;\r\n  }\r\n\r\n  &:last-of-type {\r\n    margin-bottom: 0;\r\n    padding-bottom: 0;\r\n  }\r\n`;\r\n\r\nexport const StoryTitle = styled.h1`\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n  line-height: 1.8;\r\n  margin: 0;\r\n  text-decoration: none;\r\n\r\n  a {\r\n    color: #2e2e2c;\r\n    background-color: #f8dc3d;\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport const StoryMeta = styled.div`\r\n  font-style: italic;\r\n\r\n  > span:first-child {\r\n    margin-right: 10px;\r\n  }\r\n\r\n  > span:not(:first-child):before \r\n  content: '*'\r\n  margin: 0 7px;\r\n\r\n  .story__meta-bold {\r\n    font-weight:bold;\r\n  }\r\n}\r\n`;\r\n\r\nexport const StoryMetaElement = styled.span`\r\n  font-weight: bold;\r\n  color: ${(props) => props.color || \"red\"};\r\n`;\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport { getStory } from \"../services/hnApi\";\r\nimport {\r\n  StoryWrapper,\r\n  StoryTitle,\r\n  StoryMeta,\r\n  StoryMetaElement,\r\n} from \"../styles/StoryStyles\";\r\nimport { mapTime } from \"../mappers/mapTime\";\r\n\r\nexport const Story = memo(function Story({ storyId }) {\r\n  const [story, setStory] = useState({});\r\n\r\n  useEffect(() => {\r\n    getStory(storyId).then((data) => data && data.url && setStory(data));\r\n  }, []);\r\n\r\n  return story && story.url ? (\r\n    <StoryWrapper data-testid=\"story\">\r\n      <StoryTitle>\r\n        <a href={story.url}>\r\n          <p>{story.title}</p>\r\n        </a>\r\n      </StoryTitle>\r\n      <StoryMeta>\r\n        <span data-testid=\"story-by\">\r\n          <StoryMetaElement color=\"#000\">By:</StoryMetaElement>\r\n          {` `}\r\n          {story.by}\r\n        </span>\r\n        <span data-testid=\"story-posted\">\r\n          <StoryMetaElement color=\"#000\">Posted:</StoryMetaElement>\r\n          {`  `}\r\n          {mapTime(story.time)}\r\n        </span>\r\n      </StoryMeta>\r\n    </StoryWrapper>\r\n  ) : null;\r\n});\r\n","export const mapTime = (timestamp) => {\r\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\r\n\r\n  let interval = Math.floor(seconds / 31536000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} years`;\r\n  }\r\n  interval = Math.floor(seconds / 2592000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} months`;\r\n  }\r\n  interval = Math.floor(seconds / 86400);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} days`;\r\n  }\r\n  interval = Math.floor(seconds / 3600);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} hours`;\r\n  }\r\n  interval = Math.floor(seconds / 60);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} minutes`;\r\n  }\r\n\r\n  return `${Math.floor(seconds)} seconds`;\r\n};\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    -webkit-box-sizing: border-box;\r\n            box-sizing: border-box;\r\n  }\r\n\r\n  *, *:before, *:after {\r\n    -webkit-box-sizing: inherit;\r\n            box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    line-height: 1;\r\n    color: #202020;\r\n    background-color: #fafafe;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    font-size: 16px;\r\n\r\n  }\r\n\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport const StoriesContainerWrapper = styled.main`\r\n  max-width: 1140px;\r\n  padding: 20px 15px;\r\n  margin: auto;\r\n`;\r\n","import { useEffect, useState } from \"react\";\r\nimport { STORY_INCREMENT, MAX_STORIES } from \"../constants/index\";\r\nimport { debounce } from \"../utils/debounce\";\r\n\r\nexport const useInfiniteScroll = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [count, setCount] = useState(STORY_INCREMENT);\r\n\r\n  useEffect(() => {\r\n    if (!loading) return;\r\n\r\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\r\n      setCount(MAX_STORIES);\r\n    } else {\r\n      setCount(count + STORY_INCREMENT);\r\n    }\r\n\r\n    setLoading(false);\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = debounce(() => {\r\n      // IF THE USER HAS SCROLLED TO THE BOTTOM OF THE PAGE\r\n      const scrollDistToBottom = Math.floor(\r\n        document.documentElement.offsetHeight -\r\n          (window.innerHeight + document.documentElement.scrollTop)\r\n      );\r\n      if (scrollDistToBottom > 5 || loading) return false;\r\n\r\n      setLoading(true);\r\n    }, 300);\r\n\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n\r\n  return { count };\r\n};\r\n","export const MAX_STORIES = 500;\r\nexport const STORY_INCREMENT = 30;\r\n","export const debounce = (func, wait, immediate, args) => {\r\n  let timeout;\r\n\r\n  return () => {\r\n    const context = this;\r\n    const callNow = immediate && !timeout;\r\n\r\n    const later = () => {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n};\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport { getStoryIds } from \"../services/hnApi\";\r\nimport { Story } from \"../components/Story\";\r\nimport {\r\n  GlobalStyle,\r\n  StoriesContainerWrapper,\r\n} from \"../styles/StoriesContainerStyles\";\r\nimport { useInfiniteScroll } from \"../hooks/useInfiniteScroll\";\r\n\r\nexport const StoriesContainer = () => {\r\n  const { count } = useInfiniteScroll();\r\n  const [storyIds, setStoryIds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getStoryIds().then((data) => setStoryIds(data));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <StoriesContainerWrapper data-test-id=\"stories-container\">\r\n        <h1>Hacker News Stories</h1>\r\n        {storyIds.slice(0, count).map(storyId => (\r\n          <Story key={storyId} storyId={storyId} />\r\n        ))}\r\n      </StoriesContainerWrapper>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { StoriesContainer } from \"./containers/StoriesContainer\";\n\nexport const App = () => <StoriesContainer />;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.register();\n"],"sourceRoot":""}